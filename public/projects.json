{
  "projects": [
    {
      "id": "project-1",
      "title": "3D Scene Reconstruction",
      "mainDescr": "Implementing NeRF on synthetic LEGO data to optimize volumetric scene models for photorealistic novel-view synthesis.",
      "description": "Building an end-to-end SfM pipeline (SIFT, RANSAC, fundamental/essential matrices, pose estimation, triangulation, PnP, bundle adjustment) to reconstruct 3D scenes from 2D images. Implementing NeRF on synthetic LEGO data to optimize volumetric scene models for photorealistic novel-view synthesis.",
      "image": "/assets/projects/reconstruction.gif",
      "images": [
        "/assets/projects/reconstruction_01.png",
        "/assets/projects/reconstruction_02.png",
        "/assets/projects/reconstruction_03.png",
        "/assets/projects/reconstruction_04.png"
      ],
      "link": "https://github.com/kshitijSharma2204/NERF-Project",
      "favourite": true
    },
    {
      "id": "project-2",
      "title": "One-Shot Object Detection",
      "mainDescr": "Training YOLOv5n, YOLOv5s, YOLOv5m, YOLOv5l variants on a custom basketball image dataset",
      "description": "Training YOLOv5n, YOLOv5s, YOLOv5m, YOLOv5l variants on a custom basketball image dataset, comparing performance across multiple train–test splits. The goal is to achieve more than 85% average precision with YOLOv5n on multi-object, ambient-background basketball video.",
      "image": "/assets/projects/obj_detection.gif",
      "images": [
        "/assets/projects/obj_detection_01.jpg",
        "/assets/projects/obj_detection_02.jpg",
        "/assets/projects/obj_detection.gif"
      ],
      "link": "https://github.com/kshitijSharma2204/Basketball-Object-Detection",
      "favourite": true
    },
    {
      "id": "project-3",
      "title": "Face Recognition/Verification Using Siamese Network",
      "mainDescr": "Develop an end-to-end face recognition system using the Siamese Network in TensorFlow",
      "description": "Develop an end-to-end face recognition system using the Siamese Network in TensorFlow and achieved at least 85% accuracy. Implementing Google’s FaceNet and a pre-trained random forest classification to compare accuracy with the results achieved with the Siamese Network.",
      "image": "/assets/projects/face_recognition_01.png",
      "images": [
        "/assets/projects/face_recognition_01.png",
        "/assets/projects/face_recognition_02.png",
        "/assets/projects/face_recognition_03.png",
        "/assets/projects/face_recognition_04.png",
        "/assets/projects/face_recognition_05.png"
      ],
      "link": "https://github.com/kshitijSharma2204/Face_Recognition_Using_Siamese_Network",
      "favourite": true
    },
    {
      "id": "project-4",
      "title": "Hybrid A*",
      "mainDescr": "Lightweight ROS 2 Hybrid A* planner for smooth, non-holonomic, collision-free paths—C++ core + Python visualization.",
      "description": "In ROS 2 Humble, this package delivers a complete Hybrid A* planning pipeline: it generates occupancy maps and goal positions, computes smooth, collision-free non-holonomic trajectories using heuristic-guided motion primitives and path smoothing, and provides real-time visualization and animation of the planned path.",
      "image": "/assets/projects/hybrid-a-star-main.gif",
      "images": [
        "/assets/projects/hybrid-a-star-main.gif"
      ],
      "link": "https://github.com/kshitijSharma2204/hybrid_astar",
      "favourite": true
    },
    {
      "id": "project-5",
      "title": "Trajectory Generation in Frenet Frame",
      "mainDescr": "Sample and score lateral & longitudinal polynomial paths to produce real-time, collision-free vehicle motions—with full OpenCV visualization and video output.",
      "description": "Builds a center‐lane reference path (x, y, yaw, curvature, arc-length)\nGenerates lateral (quintic) & longitudinal (quartic/quintic) polynomial candidates over multiple horizons\nScores each by jerk, time, and deviation, then filters out collisions and kinematic violations\nConverts the best trajectory to world coordinates and renders all candidates + selected path with OpenCV (outputs trajectory.mp4)",
      "image": "/assets/projects/frenet-trajectory.gif",
      "images": [
        "/assets/projects/frenet-trajectory.gif"
      ],
      "link": "https://github.com/kshitijSharma2204/Trajectory-Generation-In-Frenet-Frame",
      "favourite": true
    }
  ]
}
